syntax = "proto2";

package LTFSDmProtocol;

message LTFSDmReqNumber {
	required uint64 key = 1;
}

message LTFSDmReqNumberResp {
	required bool success = 1;
	required int64 reqNumber = 2;
}

message LTFSDmSendObjects {
	message FileName {
		required bytes filename = 1;
	}
	repeated FileName filenames = 1;
}

message LTFSDmSendObjectsResp {
	required bool success = 1;
	required int64 reqNumber = 2;
	required int64 pid = 3;
}

message LTFSDmMigRequest {
	required uint64 key = 1;
	required int64 reqNumber = 2;
	required uint64 pid = 3;
	enum State {
		PREMIGRATED = 0;
		MIGRATED = 1;
	}
	required State state = 4;
	required bytes pools = 5;
}

message LTFSDmMigRequestResp {
	required int64 error = 1;
	required int64 reqNumber = 2;
	required int64 pid = 3;
}

message LTFSDmSelRecRequest {
	required uint64 key = 1;
	required int64 reqNumber = 2;
	required uint64 pid = 3;
	enum State {
		PREMIGRATED = 0;
		RESIDENT = 1;
	}
	required State state = 4;
}

message LTFSDmSelRecRequestResp {
	required int64 error = 1;
	required int64 reqNumber = 2;
	required int64 pid = 3;
}

message LTFSDmStopRequest {
	required uint64 key = 1;
	required int64 reqNumber = 2;
	required bool forced = 3;
	required bool finish = 4;
}

message LTFSDmStopResp {
	required bool success = 1;
}

message LTFSDmStatusRequest {
	required uint64 key = 1;
	required int64 reqNumber = 2;
}

message LTFSDmStatusResp {
	required bool success = 1;
	required int64 pid = 2;
}

message LTFSDmReqStatusRequest {
	required uint64 key = 1;
	required int64 reqNumber = 2;
	required int64 pid = 3;
}

message LTFSDmReqStatusResp {
	required bool success = 1;
	required int64 reqNumber = 2;
	required int64 pid = 3;
	required int64 resident = 4;
	required int64 premigrated = 5;
	required int64 migrated = 6;
	required int64 failed = 7;
	required bool done = 8;
}

message LTFSDmAddRequest {
	required uint64 key = 1;
	required int64 reqNumber = 2;
	required bytes managedFs = 3;
	required bytes mountPoint = 4;
	required bytes fsName = 5;
}

message LTFSDmAddResp {
	enum AddResp {
		SUCCESS = 0;
		ALREADY_ADDED = 1;
		FAILED = 2;
	}
	required AddResp response = 1;
}

message LTFSDmInfoRequestsRequest {
	required uint64 key = 1;
	required int64 reqNumber = 2;
}

message LTFSDmInfoRequestsResp {
	required bytes operation = 1;
	required int64 reqnumber = 2;
	required bytes tapeid = 3;
	required bytes targetstate = 4;
	required bytes state = 5;
}

message LTFSDmInfoJobsRequest {
	required uint64 key = 1;
	required int64 reqNumber = 2;
}

message LTFSDmInfoJobsResp {
	required bytes operation = 1;
	required bytes filename = 2;
	required int64 reqnumber = 3;
	required int64 replnumber = 4;
	required int64 filesize = 5;
	required bytes tapeid = 6;
	required bytes state = 7;
}

message LTFSDmInfoDrivesRequest {
	required uint64 key = 1;
}

message LTFSDmInfoDrivesResp {
	required bytes id = 1;
	required bytes devname = 2;
	required uint64 slot = 3;
	required bytes status = 4;
	required bool busy = 5;
}

message LTFSDmInfoTapesRequest {
	required uint64 key = 1;
}

message LTFSDmInfoTapesResp {
	required bytes id = 1;
	required uint64 slot = 2;
	required uint64 totalcap = 3;
	required uint64 remaincap = 4;
	required bytes status = 5;
	required uint64 inprogress = 6;
	required bytes pool = 7;
	required bytes state = 8;
}

message LTFSDmPoolCreateRequest {
	required uint64 key = 1;
	required bytes poolname = 2;
}

message LTFSDmPoolDeleteRequest {
	required uint64 key = 1;
	required bytes poolname = 2;
}

message LTFSDmPoolAddRequest {
	required uint64 key = 1;
	required bytes poolname = 2;
	repeated bytes tapeid = 3;
}

message LTFSDmPoolRemoveRequest {
	required uint64 key = 1;
	required bytes poolname = 2;
	repeated bytes tapeid = 3;
}

message LTFSDmPoolResp {
	required int64 response = 1;
	optional bytes tapeid = 2;
}

message LTFSDmInfoPoolsRequest {
	required uint64 key = 1;
}

message LTFSDmInfoPoolsResp {
	required bytes poolname = 1;
	required uint64 total = 2;
	required uint64 free = 3;
	required uint64 unref = 4;
	required uint64 numtapes = 5;
}

message LTFSDmRetrieveRequest {
	required uint64 key = 1;
}

message LTFSDmRetrieveResp {
	required int64 error = 1;
}

message Command {
	oneof commands {
		LTFSDmReqNumber reqnum = 1;
		LTFSDmReqNumberResp reqnumresp = 2;
		LTFSDmStopRequest stoprequest = 3;
		LTFSDmStopResp stopresp = 4;
		LTFSDmStatusRequest statusrequest = 5;
		LTFSDmStatusResp statusresp = 6;
		LTFSDmSendObjects sendobjects = 7;
		LTFSDmSendObjectsResp sendobjectsresp = 8;
		LTFSDmMigRequest migrequest = 9;
		LTFSDmMigRequestResp migrequestresp = 10;
		LTFSDmSelRecRequest selrecrequest = 11;
		LTFSDmSelRecRequestResp selrecrequestresp = 12;
		LTFSDmReqStatusRequest reqstatusrequest = 13;
		LTFSDmReqStatusResp reqstatusresp = 14;
		LTFSDmAddRequest addrequest = 15;
		LTFSDmAddResp addresp = 16;
		LTFSDmInfoRequestsRequest inforequestsrequest = 17;
		LTFSDmInfoRequestsResp inforequestsresp = 18;
		LTFSDmInfoJobsRequest infojobsrequest = 19;
		LTFSDmInfoJobsResp infojobsresp = 20;
		LTFSDmInfoDrivesRequest infodrivesrequest = 21;
		LTFSDmInfoDrivesResp infodrivesresp = 22;
		LTFSDmInfoTapesRequest infotapesrequest = 23;
		LTFSDmInfoTapesResp infotapesresp = 24;
		LTFSDmPoolCreateRequest poolcreaterequest = 25;
		LTFSDmPoolDeleteRequest pooldeleterequest = 26;
		LTFSDmPoolAddRequest pooladdrequest = 27;
		LTFSDmPoolRemoveRequest poolremoverequest = 28;
		LTFSDmPoolResp poolresp = 29;
		LTFSDmInfoPoolsRequest infopoolsrequest = 30;
		LTFSDmInfoPoolsResp infopoolsresp = 31;
		LTFSDmRetrieveRequest retrieverequest = 32;
		LTFSDmRetrieveResp retrieveresp = 33;
	}
}
