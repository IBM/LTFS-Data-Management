// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ltfsdm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ltfsdm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace LTFSDmD {

namespace {

const ::google::protobuf::Descriptor* LTFSDmMigRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LTFSDmMigRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LTFSDmMigRequest_FileName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LTFSDmMigRequest_FileName_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LTFSDmMigRequest_State_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LTFSDmMigRequestResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LTFSDmMigRequestResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LTFSDmSelRecRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LTFSDmSelRecRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LTFSDmSelRecRequest_FileName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LTFSDmSelRecRequest_FileName_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LTFSDmSelRecRequest_State_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LTFSDmTransRecRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LTFSDmTransRecRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LTFSDmTransRecRequest_State_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Command_reflection_ = NULL;
struct CommandOneofInstance {
  const ::LTFSDmD::LTFSDmMigRequest* migrequest_;
  const ::LTFSDmD::LTFSDmMigRequestResp* migrequestresp_;
  const ::LTFSDmD::LTFSDmSelRecRequest* selrecrequest_;
  const ::LTFSDmD::LTFSDmTransRecRequest* transrecrequest_;
}* Command_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_ltfsdm_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ltfsdm_2eproto() {
  protobuf_AddDesc_ltfsdm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ltfsdm.proto");
  GOOGLE_CHECK(file != NULL);
  LTFSDmMigRequest_descriptor_ = file->message_type(0);
  static const int LTFSDmMigRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTFSDmMigRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTFSDmMigRequest, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTFSDmMigRequest, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTFSDmMigRequest, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTFSDmMigRequest, filenames_),
  };
  LTFSDmMigRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LTFSDmMigRequest_descriptor_,
      LTFSDmMigRequest::default_instance_,
      LTFSDmMigRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTFSDmMigRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(LTFSDmMigRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTFSDmMigRequest, _internal_metadata_),
      -1);
  LTFSDmMigRequest_FileName_descriptor_ = LTFSDmMigRequest_descriptor_->nested_type(0);
  static const int LTFSDmMigRequest_FileName_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTFSDmMigRequest_FileName, filename_),
  };
  LTFSDmMigRequest_FileName_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LTFSDmMigRequest_FileName_descriptor_,
      LTFSDmMigRequest_FileName::default_instance_,
      LTFSDmMigRequest_FileName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTFSDmMigRequest_FileName, _has_bits_[0]),
      -1,
      -1,
      sizeof(LTFSDmMigRequest_FileName),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTFSDmMigRequest_FileName, _internal_metadata_),
      -1);
  LTFSDmMigRequest_State_descriptor_ = LTFSDmMigRequest_descriptor_->enum_type(0);
  LTFSDmMigRequestResp_descriptor_ = file->message_type(1);
  static const int LTFSDmMigRequestResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTFSDmMigRequestResp, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTFSDmMigRequestResp, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTFSDmMigRequestResp, pid_),
  };
  LTFSDmMigRequestResp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LTFSDmMigRequestResp_descriptor_,
      LTFSDmMigRequestResp::default_instance_,
      LTFSDmMigRequestResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTFSDmMigRequestResp, _has_bits_[0]),
      -1,
      -1,
      sizeof(LTFSDmMigRequestResp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTFSDmMigRequestResp, _internal_metadata_),
      -1);
  LTFSDmSelRecRequest_descriptor_ = file->message_type(2);
  static const int LTFSDmSelRecRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTFSDmSelRecRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTFSDmSelRecRequest, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTFSDmSelRecRequest, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTFSDmSelRecRequest, filenames_),
  };
  LTFSDmSelRecRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LTFSDmSelRecRequest_descriptor_,
      LTFSDmSelRecRequest::default_instance_,
      LTFSDmSelRecRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTFSDmSelRecRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(LTFSDmSelRecRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTFSDmSelRecRequest, _internal_metadata_),
      -1);
  LTFSDmSelRecRequest_FileName_descriptor_ = LTFSDmSelRecRequest_descriptor_->nested_type(0);
  static const int LTFSDmSelRecRequest_FileName_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTFSDmSelRecRequest_FileName, filename_),
  };
  LTFSDmSelRecRequest_FileName_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LTFSDmSelRecRequest_FileName_descriptor_,
      LTFSDmSelRecRequest_FileName::default_instance_,
      LTFSDmSelRecRequest_FileName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTFSDmSelRecRequest_FileName, _has_bits_[0]),
      -1,
      -1,
      sizeof(LTFSDmSelRecRequest_FileName),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTFSDmSelRecRequest_FileName, _internal_metadata_),
      -1);
  LTFSDmSelRecRequest_State_descriptor_ = LTFSDmSelRecRequest_descriptor_->enum_type(0);
  LTFSDmTransRecRequest_descriptor_ = file->message_type(3);
  static const int LTFSDmTransRecRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTFSDmTransRecRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTFSDmTransRecRequest, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTFSDmTransRecRequest, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTFSDmTransRecRequest, fsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTFSDmTransRecRequest, igen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTFSDmTransRecRequest, inum_),
  };
  LTFSDmTransRecRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LTFSDmTransRecRequest_descriptor_,
      LTFSDmTransRecRequest::default_instance_,
      LTFSDmTransRecRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTFSDmTransRecRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(LTFSDmTransRecRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTFSDmTransRecRequest, _internal_metadata_),
      -1);
  LTFSDmTransRecRequest_State_descriptor_ = LTFSDmTransRecRequest_descriptor_->enum_type(0);
  Command_descriptor_ = file->message_type(4);
  static const int Command_offsets_[5] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Command_default_oneof_instance_, migrequest_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Command_default_oneof_instance_, migrequestresp_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Command_default_oneof_instance_, selrecrequest_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Command_default_oneof_instance_, transrecrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, commands_),
  };
  Command_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Command_descriptor_,
      Command::default_instance_,
      Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _has_bits_[0]),
      -1,
      -1,
      Command_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _oneof_case_[0]),
      sizeof(Command),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ltfsdm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LTFSDmMigRequest_descriptor_, &LTFSDmMigRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LTFSDmMigRequest_FileName_descriptor_, &LTFSDmMigRequest_FileName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LTFSDmMigRequestResp_descriptor_, &LTFSDmMigRequestResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LTFSDmSelRecRequest_descriptor_, &LTFSDmSelRecRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LTFSDmSelRecRequest_FileName_descriptor_, &LTFSDmSelRecRequest_FileName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LTFSDmTransRecRequest_descriptor_, &LTFSDmTransRecRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Command_descriptor_, &Command::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ltfsdm_2eproto() {
  delete LTFSDmMigRequest::default_instance_;
  delete LTFSDmMigRequest_reflection_;
  delete LTFSDmMigRequest_FileName::default_instance_;
  delete LTFSDmMigRequest_FileName_reflection_;
  delete LTFSDmMigRequestResp::default_instance_;
  delete LTFSDmMigRequestResp_reflection_;
  delete LTFSDmSelRecRequest::default_instance_;
  delete LTFSDmSelRecRequest_reflection_;
  delete LTFSDmSelRecRequest_FileName::default_instance_;
  delete LTFSDmSelRecRequest_FileName_reflection_;
  delete LTFSDmTransRecRequest::default_instance_;
  delete LTFSDmTransRecRequest_reflection_;
  delete Command::default_instance_;
  delete Command_default_oneof_instance_;
  delete Command_reflection_;
}

void protobuf_AddDesc_ltfsdm_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ltfsdm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014ltfsdm.proto\022\007LTFSDmD\"\350\001\n\020LTFSDmMigReq"
    "uest\022\013\n\003key\030\001 \002(\004\022\r\n\005token\030\002 \002(\004\022\013\n\003pid\030"
    "\003 \002(\004\022.\n\005state\030\004 \002(\0162\037.LTFSDmD.LTFSDmMig"
    "Request.State\0225\n\tfilenames\030\005 \003(\0132\".LTFSD"
    "mD.LTFSDmMigRequest.FileName\032\034\n\010FileName"
    "\022\020\n\010filename\030\001 \002(\t\"&\n\005State\022\017\n\013PREMIGRAT"
    "ED\020\000\022\014\n\010MIGRATED\020\001\"C\n\024LTFSDmMigRequestRe"
    "sp\022\017\n\007success\030\001 \002(\010\022\r\n\005token\030\002 \002(\004\022\013\n\003pi"
    "d\030\003 \002(\004\"\344\001\n\023LTFSDmSelRecRequest\022\013\n\003key\030\001"
    " \002(\004\022\r\n\005token\030\002 \002(\004\0221\n\005state\030\003 \002(\0162\".LTF"
    "SDmD.LTFSDmSelRecRequest.State\0228\n\tfilena"
    "mes\030\004 \003(\0132%.LTFSDmD.LTFSDmSelRecRequest."
    "FileName\032\034\n\010FileName\022\020\n\010filename\030\001 \002(\t\"&"
    "\n\005State\022\017\n\013PREMIGRATED\020\000\022\014\n\010MIGRATED\020\001\"\272"
    "\001\n\025LTFSDmTransRecRequest\022\013\n\003key\030\001 \002(\004\022\r\n"
    "\005token\030\002 \002(\004\0223\n\005state\030\003 \002(\0162$.LTFSDmD.LT"
    "FSDmTransRecRequest.State\022\014\n\004fsid\030\004 \002(\004\022"
    "\014\n\004igen\030\005 \002(\004\022\014\n\004inum\030\006 \002(\004\"&\n\005State\022\017\n\013"
    "PREMIGRATED\020\000\022\014\n\010MIGRATED\020\001\"\361\001\n\007Command\022"
    "/\n\nmigrequest\030\001 \001(\0132\031.LTFSDmD.LTFSDmMigR"
    "equestH\000\0227\n\016migrequestresp\030\002 \001(\0132\035.LTFSD"
    "mD.LTFSDmMigRequestRespH\000\0225\n\rselrecreque"
    "st\030\003 \001(\0132\034.LTFSDmD.LTFSDmSelRecRequestH\000"
    "\0229\n\017transrecrequest\030\004 \001(\0132\036.LTFSDmD.LTFS"
    "DmTransRecRequestH\000B\n\n\010commands", 991);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ltfsdm.proto", &protobuf_RegisterTypes);
  LTFSDmMigRequest::default_instance_ = new LTFSDmMigRequest();
  LTFSDmMigRequest_FileName::default_instance_ = new LTFSDmMigRequest_FileName();
  LTFSDmMigRequestResp::default_instance_ = new LTFSDmMigRequestResp();
  LTFSDmSelRecRequest::default_instance_ = new LTFSDmSelRecRequest();
  LTFSDmSelRecRequest_FileName::default_instance_ = new LTFSDmSelRecRequest_FileName();
  LTFSDmTransRecRequest::default_instance_ = new LTFSDmTransRecRequest();
  Command::default_instance_ = new Command();
  Command_default_oneof_instance_ = new CommandOneofInstance();
  LTFSDmMigRequest::default_instance_->InitAsDefaultInstance();
  LTFSDmMigRequest_FileName::default_instance_->InitAsDefaultInstance();
  LTFSDmMigRequestResp::default_instance_->InitAsDefaultInstance();
  LTFSDmSelRecRequest::default_instance_->InitAsDefaultInstance();
  LTFSDmSelRecRequest_FileName::default_instance_->InitAsDefaultInstance();
  LTFSDmTransRecRequest::default_instance_->InitAsDefaultInstance();
  Command::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ltfsdm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ltfsdm_2eproto {
  StaticDescriptorInitializer_ltfsdm_2eproto() {
    protobuf_AddDesc_ltfsdm_2eproto();
  }
} static_descriptor_initializer_ltfsdm_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* LTFSDmMigRequest_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LTFSDmMigRequest_State_descriptor_;
}
bool LTFSDmMigRequest_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LTFSDmMigRequest_State LTFSDmMigRequest::PREMIGRATED;
const LTFSDmMigRequest_State LTFSDmMigRequest::MIGRATED;
const LTFSDmMigRequest_State LTFSDmMigRequest::State_MIN;
const LTFSDmMigRequest_State LTFSDmMigRequest::State_MAX;
const int LTFSDmMigRequest::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LTFSDmMigRequest_FileName::kFilenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LTFSDmMigRequest_FileName::LTFSDmMigRequest_FileName()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LTFSDmD.LTFSDmMigRequest.FileName)
}

void LTFSDmMigRequest_FileName::InitAsDefaultInstance() {
}

LTFSDmMigRequest_FileName::LTFSDmMigRequest_FileName(const LTFSDmMigRequest_FileName& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LTFSDmD.LTFSDmMigRequest.FileName)
}

void LTFSDmMigRequest_FileName::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LTFSDmMigRequest_FileName::~LTFSDmMigRequest_FileName() {
  // @@protoc_insertion_point(destructor:LTFSDmD.LTFSDmMigRequest.FileName)
  SharedDtor();
}

void LTFSDmMigRequest_FileName::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LTFSDmMigRequest_FileName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTFSDmMigRequest_FileName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LTFSDmMigRequest_FileName_descriptor_;
}

const LTFSDmMigRequest_FileName& LTFSDmMigRequest_FileName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ltfsdm_2eproto();
  return *default_instance_;
}

LTFSDmMigRequest_FileName* LTFSDmMigRequest_FileName::default_instance_ = NULL;

LTFSDmMigRequest_FileName* LTFSDmMigRequest_FileName::New(::google::protobuf::Arena* arena) const {
  LTFSDmMigRequest_FileName* n = new LTFSDmMigRequest_FileName;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LTFSDmMigRequest_FileName::Clear() {
// @@protoc_insertion_point(message_clear_start:LTFSDmD.LTFSDmMigRequest.FileName)
  if (has_filename()) {
    filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LTFSDmMigRequest_FileName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LTFSDmD.LTFSDmMigRequest.FileName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string filename = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "LTFSDmD.LTFSDmMigRequest.FileName.filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LTFSDmD.LTFSDmMigRequest.FileName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LTFSDmD.LTFSDmMigRequest.FileName)
  return false;
#undef DO_
}

void LTFSDmMigRequest_FileName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LTFSDmD.LTFSDmMigRequest.FileName)
  // required string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LTFSDmD.LTFSDmMigRequest.FileName.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LTFSDmD.LTFSDmMigRequest.FileName)
}

::google::protobuf::uint8* LTFSDmMigRequest_FileName::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LTFSDmD.LTFSDmMigRequest.FileName)
  // required string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LTFSDmD.LTFSDmMigRequest.FileName.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LTFSDmD.LTFSDmMigRequest.FileName)
  return target;
}

int LTFSDmMigRequest_FileName::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:LTFSDmD.LTFSDmMigRequest.FileName)
  int total_size = 0;

  // required string filename = 1;
  if (has_filename()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTFSDmMigRequest_FileName::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LTFSDmD.LTFSDmMigRequest.FileName)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LTFSDmMigRequest_FileName* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LTFSDmMigRequest_FileName>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LTFSDmD.LTFSDmMigRequest.FileName)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LTFSDmD.LTFSDmMigRequest.FileName)
    MergeFrom(*source);
  }
}

void LTFSDmMigRequest_FileName::MergeFrom(const LTFSDmMigRequest_FileName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LTFSDmD.LTFSDmMigRequest.FileName)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LTFSDmMigRequest_FileName::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LTFSDmD.LTFSDmMigRequest.FileName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTFSDmMigRequest_FileName::CopyFrom(const LTFSDmMigRequest_FileName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LTFSDmD.LTFSDmMigRequest.FileName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTFSDmMigRequest_FileName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LTFSDmMigRequest_FileName::Swap(LTFSDmMigRequest_FileName* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LTFSDmMigRequest_FileName::InternalSwap(LTFSDmMigRequest_FileName* other) {
  filename_.Swap(&other->filename_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LTFSDmMigRequest_FileName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LTFSDmMigRequest_FileName_descriptor_;
  metadata.reflection = LTFSDmMigRequest_FileName_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LTFSDmMigRequest::kKeyFieldNumber;
const int LTFSDmMigRequest::kTokenFieldNumber;
const int LTFSDmMigRequest::kPidFieldNumber;
const int LTFSDmMigRequest::kStateFieldNumber;
const int LTFSDmMigRequest::kFilenamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LTFSDmMigRequest::LTFSDmMigRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LTFSDmD.LTFSDmMigRequest)
}

void LTFSDmMigRequest::InitAsDefaultInstance() {
}

LTFSDmMigRequest::LTFSDmMigRequest(const LTFSDmMigRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LTFSDmD.LTFSDmMigRequest)
}

void LTFSDmMigRequest::SharedCtor() {
  _cached_size_ = 0;
  key_ = GOOGLE_ULONGLONG(0);
  token_ = GOOGLE_ULONGLONG(0);
  pid_ = GOOGLE_ULONGLONG(0);
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LTFSDmMigRequest::~LTFSDmMigRequest() {
  // @@protoc_insertion_point(destructor:LTFSDmD.LTFSDmMigRequest)
  SharedDtor();
}

void LTFSDmMigRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LTFSDmMigRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTFSDmMigRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LTFSDmMigRequest_descriptor_;
}

const LTFSDmMigRequest& LTFSDmMigRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ltfsdm_2eproto();
  return *default_instance_;
}

LTFSDmMigRequest* LTFSDmMigRequest::default_instance_ = NULL;

LTFSDmMigRequest* LTFSDmMigRequest::New(::google::protobuf::Arena* arena) const {
  LTFSDmMigRequest* n = new LTFSDmMigRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LTFSDmMigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:LTFSDmD.LTFSDmMigRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LTFSDmMigRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LTFSDmMigRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(key_, pid_);
    state_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  filenames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LTFSDmMigRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LTFSDmD.LTFSDmMigRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_token;
        break;
      }

      // required uint64 token = 2;
      case 2: {
        if (tag == 16) {
         parse_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &token_)));
          set_has_token();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pid;
        break;
      }

      // required uint64 pid = 3;
      case 3: {
        if (tag == 24) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // required .LTFSDmD.LTFSDmMigRequest.State state = 4;
      case 4: {
        if (tag == 32) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LTFSDmD::LTFSDmMigRequest_State_IsValid(value)) {
            set_state(static_cast< ::LTFSDmD::LTFSDmMigRequest_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_filenames;
        break;
      }

      // repeated .LTFSDmD.LTFSDmMigRequest.FileName filenames = 5;
      case 5: {
        if (tag == 42) {
         parse_filenames:
          DO_(input->IncrementRecursionDepth());
         parse_loop_filenames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_filenames()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_filenames;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LTFSDmD.LTFSDmMigRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LTFSDmD.LTFSDmMigRequest)
  return false;
#undef DO_
}

void LTFSDmMigRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LTFSDmD.LTFSDmMigRequest)
  // required uint64 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->key(), output);
  }

  // required uint64 token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->token(), output);
  }

  // required uint64 pid = 3;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->pid(), output);
  }

  // required .LTFSDmD.LTFSDmMigRequest.State state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

  // repeated .LTFSDmD.LTFSDmMigRequest.FileName filenames = 5;
  for (unsigned int i = 0, n = this->filenames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->filenames(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LTFSDmD.LTFSDmMigRequest)
}

::google::protobuf::uint8* LTFSDmMigRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LTFSDmD.LTFSDmMigRequest)
  // required uint64 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->key(), target);
  }

  // required uint64 token = 2;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->token(), target);
  }

  // required uint64 pid = 3;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->pid(), target);
  }

  // required .LTFSDmD.LTFSDmMigRequest.State state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }

  // repeated .LTFSDmD.LTFSDmMigRequest.FileName filenames = 5;
  for (unsigned int i = 0, n = this->filenames_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->filenames(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LTFSDmD.LTFSDmMigRequest)
  return target;
}

int LTFSDmMigRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:LTFSDmD.LTFSDmMigRequest)
  int total_size = 0;

  if (has_key()) {
    // required uint64 key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->key());
  }

  if (has_token()) {
    // required uint64 token = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->token());
  }

  if (has_pid()) {
    // required uint64 pid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->pid());
  }

  if (has_state()) {
    // required .LTFSDmD.LTFSDmMigRequest.State state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  return total_size;
}
int LTFSDmMigRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:LTFSDmD.LTFSDmMigRequest)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint64 key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->key());

    // required uint64 token = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->token());

    // required uint64 pid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->pid());

    // required .LTFSDmD.LTFSDmMigRequest.State state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .LTFSDmD.LTFSDmMigRequest.FileName filenames = 5;
  total_size += 1 * this->filenames_size();
  for (int i = 0; i < this->filenames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->filenames(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTFSDmMigRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LTFSDmD.LTFSDmMigRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LTFSDmMigRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LTFSDmMigRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LTFSDmD.LTFSDmMigRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LTFSDmD.LTFSDmMigRequest)
    MergeFrom(*source);
  }
}

void LTFSDmMigRequest::MergeFrom(const LTFSDmMigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LTFSDmD.LTFSDmMigRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  filenames_.MergeFrom(from.filenames_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LTFSDmMigRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LTFSDmD.LTFSDmMigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTFSDmMigRequest::CopyFrom(const LTFSDmMigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LTFSDmD.LTFSDmMigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTFSDmMigRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->filenames())) return false;
  return true;
}

void LTFSDmMigRequest::Swap(LTFSDmMigRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LTFSDmMigRequest::InternalSwap(LTFSDmMigRequest* other) {
  std::swap(key_, other->key_);
  std::swap(token_, other->token_);
  std::swap(pid_, other->pid_);
  std::swap(state_, other->state_);
  filenames_.UnsafeArenaSwap(&other->filenames_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LTFSDmMigRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LTFSDmMigRequest_descriptor_;
  metadata.reflection = LTFSDmMigRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LTFSDmMigRequest_FileName

// required string filename = 1;
bool LTFSDmMigRequest_FileName::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LTFSDmMigRequest_FileName::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
void LTFSDmMigRequest_FileName::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
void LTFSDmMigRequest_FileName::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
 const ::std::string& LTFSDmMigRequest_FileName::filename() const {
  // @@protoc_insertion_point(field_get:LTFSDmD.LTFSDmMigRequest.FileName.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LTFSDmMigRequest_FileName::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LTFSDmD.LTFSDmMigRequest.FileName.filename)
}
 void LTFSDmMigRequest_FileName::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LTFSDmD.LTFSDmMigRequest.FileName.filename)
}
 void LTFSDmMigRequest_FileName::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LTFSDmD.LTFSDmMigRequest.FileName.filename)
}
 ::std::string* LTFSDmMigRequest_FileName::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:LTFSDmD.LTFSDmMigRequest.FileName.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LTFSDmMigRequest_FileName::release_filename() {
  // @@protoc_insertion_point(field_release:LTFSDmD.LTFSDmMigRequest.FileName.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LTFSDmMigRequest_FileName::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:LTFSDmD.LTFSDmMigRequest.FileName.filename)
}

// -------------------------------------------------------------------

// LTFSDmMigRequest

// required uint64 key = 1;
bool LTFSDmMigRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LTFSDmMigRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void LTFSDmMigRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void LTFSDmMigRequest::clear_key() {
  key_ = GOOGLE_ULONGLONG(0);
  clear_has_key();
}
 ::google::protobuf::uint64 LTFSDmMigRequest::key() const {
  // @@protoc_insertion_point(field_get:LTFSDmD.LTFSDmMigRequest.key)
  return key_;
}
 void LTFSDmMigRequest::set_key(::google::protobuf::uint64 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:LTFSDmD.LTFSDmMigRequest.key)
}

// required uint64 token = 2;
bool LTFSDmMigRequest::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LTFSDmMigRequest::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
void LTFSDmMigRequest::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
void LTFSDmMigRequest::clear_token() {
  token_ = GOOGLE_ULONGLONG(0);
  clear_has_token();
}
 ::google::protobuf::uint64 LTFSDmMigRequest::token() const {
  // @@protoc_insertion_point(field_get:LTFSDmD.LTFSDmMigRequest.token)
  return token_;
}
 void LTFSDmMigRequest::set_token(::google::protobuf::uint64 value) {
  set_has_token();
  token_ = value;
  // @@protoc_insertion_point(field_set:LTFSDmD.LTFSDmMigRequest.token)
}

// required uint64 pid = 3;
bool LTFSDmMigRequest::has_pid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LTFSDmMigRequest::set_has_pid() {
  _has_bits_[0] |= 0x00000004u;
}
void LTFSDmMigRequest::clear_has_pid() {
  _has_bits_[0] &= ~0x00000004u;
}
void LTFSDmMigRequest::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
 ::google::protobuf::uint64 LTFSDmMigRequest::pid() const {
  // @@protoc_insertion_point(field_get:LTFSDmD.LTFSDmMigRequest.pid)
  return pid_;
}
 void LTFSDmMigRequest::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:LTFSDmD.LTFSDmMigRequest.pid)
}

// required .LTFSDmD.LTFSDmMigRequest.State state = 4;
bool LTFSDmMigRequest::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LTFSDmMigRequest::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
void LTFSDmMigRequest::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
void LTFSDmMigRequest::clear_state() {
  state_ = 0;
  clear_has_state();
}
 ::LTFSDmD::LTFSDmMigRequest_State LTFSDmMigRequest::state() const {
  // @@protoc_insertion_point(field_get:LTFSDmD.LTFSDmMigRequest.state)
  return static_cast< ::LTFSDmD::LTFSDmMigRequest_State >(state_);
}
 void LTFSDmMigRequest::set_state(::LTFSDmD::LTFSDmMigRequest_State value) {
  assert(::LTFSDmD::LTFSDmMigRequest_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:LTFSDmD.LTFSDmMigRequest.state)
}

// repeated .LTFSDmD.LTFSDmMigRequest.FileName filenames = 5;
int LTFSDmMigRequest::filenames_size() const {
  return filenames_.size();
}
void LTFSDmMigRequest::clear_filenames() {
  filenames_.Clear();
}
const ::LTFSDmD::LTFSDmMigRequest_FileName& LTFSDmMigRequest::filenames(int index) const {
  // @@protoc_insertion_point(field_get:LTFSDmD.LTFSDmMigRequest.filenames)
  return filenames_.Get(index);
}
::LTFSDmD::LTFSDmMigRequest_FileName* LTFSDmMigRequest::mutable_filenames(int index) {
  // @@protoc_insertion_point(field_mutable:LTFSDmD.LTFSDmMigRequest.filenames)
  return filenames_.Mutable(index);
}
::LTFSDmD::LTFSDmMigRequest_FileName* LTFSDmMigRequest::add_filenames() {
  // @@protoc_insertion_point(field_add:LTFSDmD.LTFSDmMigRequest.filenames)
  return filenames_.Add();
}
::google::protobuf::RepeatedPtrField< ::LTFSDmD::LTFSDmMigRequest_FileName >*
LTFSDmMigRequest::mutable_filenames() {
  // @@protoc_insertion_point(field_mutable_list:LTFSDmD.LTFSDmMigRequest.filenames)
  return &filenames_;
}
const ::google::protobuf::RepeatedPtrField< ::LTFSDmD::LTFSDmMigRequest_FileName >&
LTFSDmMigRequest::filenames() const {
  // @@protoc_insertion_point(field_list:LTFSDmD.LTFSDmMigRequest.filenames)
  return filenames_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LTFSDmMigRequestResp::kSuccessFieldNumber;
const int LTFSDmMigRequestResp::kTokenFieldNumber;
const int LTFSDmMigRequestResp::kPidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LTFSDmMigRequestResp::LTFSDmMigRequestResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LTFSDmD.LTFSDmMigRequestResp)
}

void LTFSDmMigRequestResp::InitAsDefaultInstance() {
}

LTFSDmMigRequestResp::LTFSDmMigRequestResp(const LTFSDmMigRequestResp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LTFSDmD.LTFSDmMigRequestResp)
}

void LTFSDmMigRequestResp::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  token_ = GOOGLE_ULONGLONG(0);
  pid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LTFSDmMigRequestResp::~LTFSDmMigRequestResp() {
  // @@protoc_insertion_point(destructor:LTFSDmD.LTFSDmMigRequestResp)
  SharedDtor();
}

void LTFSDmMigRequestResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LTFSDmMigRequestResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTFSDmMigRequestResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LTFSDmMigRequestResp_descriptor_;
}

const LTFSDmMigRequestResp& LTFSDmMigRequestResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ltfsdm_2eproto();
  return *default_instance_;
}

LTFSDmMigRequestResp* LTFSDmMigRequestResp::default_instance_ = NULL;

LTFSDmMigRequestResp* LTFSDmMigRequestResp::New(::google::protobuf::Arena* arena) const {
  LTFSDmMigRequestResp* n = new LTFSDmMigRequestResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LTFSDmMigRequestResp::Clear() {
// @@protoc_insertion_point(message_clear_start:LTFSDmD.LTFSDmMigRequestResp)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LTFSDmMigRequestResp, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LTFSDmMigRequestResp*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(token_, success_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LTFSDmMigRequestResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LTFSDmD.LTFSDmMigRequestResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_token;
        break;
      }

      // required uint64 token = 2;
      case 2: {
        if (tag == 16) {
         parse_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &token_)));
          set_has_token();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pid;
        break;
      }

      // required uint64 pid = 3;
      case 3: {
        if (tag == 24) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LTFSDmD.LTFSDmMigRequestResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LTFSDmD.LTFSDmMigRequestResp)
  return false;
#undef DO_
}

void LTFSDmMigRequestResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LTFSDmD.LTFSDmMigRequestResp)
  // required bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // required uint64 token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->token(), output);
  }

  // required uint64 pid = 3;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->pid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LTFSDmD.LTFSDmMigRequestResp)
}

::google::protobuf::uint8* LTFSDmMigRequestResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LTFSDmD.LTFSDmMigRequestResp)
  // required bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // required uint64 token = 2;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->token(), target);
  }

  // required uint64 pid = 3;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->pid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LTFSDmD.LTFSDmMigRequestResp)
  return target;
}

int LTFSDmMigRequestResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:LTFSDmD.LTFSDmMigRequestResp)
  int total_size = 0;

  if (has_success()) {
    // required bool success = 1;
    total_size += 1 + 1;
  }

  if (has_token()) {
    // required uint64 token = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->token());
  }

  if (has_pid()) {
    // required uint64 pid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->pid());
  }

  return total_size;
}
int LTFSDmMigRequestResp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:LTFSDmD.LTFSDmMigRequestResp)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bool success = 1;
    total_size += 1 + 1;

    // required uint64 token = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->token());

    // required uint64 pid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->pid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTFSDmMigRequestResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LTFSDmD.LTFSDmMigRequestResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LTFSDmMigRequestResp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LTFSDmMigRequestResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LTFSDmD.LTFSDmMigRequestResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LTFSDmD.LTFSDmMigRequestResp)
    MergeFrom(*source);
  }
}

void LTFSDmMigRequestResp::MergeFrom(const LTFSDmMigRequestResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LTFSDmD.LTFSDmMigRequestResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LTFSDmMigRequestResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LTFSDmD.LTFSDmMigRequestResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTFSDmMigRequestResp::CopyFrom(const LTFSDmMigRequestResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LTFSDmD.LTFSDmMigRequestResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTFSDmMigRequestResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void LTFSDmMigRequestResp::Swap(LTFSDmMigRequestResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LTFSDmMigRequestResp::InternalSwap(LTFSDmMigRequestResp* other) {
  std::swap(success_, other->success_);
  std::swap(token_, other->token_);
  std::swap(pid_, other->pid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LTFSDmMigRequestResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LTFSDmMigRequestResp_descriptor_;
  metadata.reflection = LTFSDmMigRequestResp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LTFSDmMigRequestResp

// required bool success = 1;
bool LTFSDmMigRequestResp::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LTFSDmMigRequestResp::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
void LTFSDmMigRequestResp::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
void LTFSDmMigRequestResp::clear_success() {
  success_ = false;
  clear_has_success();
}
 bool LTFSDmMigRequestResp::success() const {
  // @@protoc_insertion_point(field_get:LTFSDmD.LTFSDmMigRequestResp.success)
  return success_;
}
 void LTFSDmMigRequestResp::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:LTFSDmD.LTFSDmMigRequestResp.success)
}

// required uint64 token = 2;
bool LTFSDmMigRequestResp::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LTFSDmMigRequestResp::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
void LTFSDmMigRequestResp::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
void LTFSDmMigRequestResp::clear_token() {
  token_ = GOOGLE_ULONGLONG(0);
  clear_has_token();
}
 ::google::protobuf::uint64 LTFSDmMigRequestResp::token() const {
  // @@protoc_insertion_point(field_get:LTFSDmD.LTFSDmMigRequestResp.token)
  return token_;
}
 void LTFSDmMigRequestResp::set_token(::google::protobuf::uint64 value) {
  set_has_token();
  token_ = value;
  // @@protoc_insertion_point(field_set:LTFSDmD.LTFSDmMigRequestResp.token)
}

// required uint64 pid = 3;
bool LTFSDmMigRequestResp::has_pid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LTFSDmMigRequestResp::set_has_pid() {
  _has_bits_[0] |= 0x00000004u;
}
void LTFSDmMigRequestResp::clear_has_pid() {
  _has_bits_[0] &= ~0x00000004u;
}
void LTFSDmMigRequestResp::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
 ::google::protobuf::uint64 LTFSDmMigRequestResp::pid() const {
  // @@protoc_insertion_point(field_get:LTFSDmD.LTFSDmMigRequestResp.pid)
  return pid_;
}
 void LTFSDmMigRequestResp::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:LTFSDmD.LTFSDmMigRequestResp.pid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* LTFSDmSelRecRequest_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LTFSDmSelRecRequest_State_descriptor_;
}
bool LTFSDmSelRecRequest_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LTFSDmSelRecRequest_State LTFSDmSelRecRequest::PREMIGRATED;
const LTFSDmSelRecRequest_State LTFSDmSelRecRequest::MIGRATED;
const LTFSDmSelRecRequest_State LTFSDmSelRecRequest::State_MIN;
const LTFSDmSelRecRequest_State LTFSDmSelRecRequest::State_MAX;
const int LTFSDmSelRecRequest::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LTFSDmSelRecRequest_FileName::kFilenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LTFSDmSelRecRequest_FileName::LTFSDmSelRecRequest_FileName()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LTFSDmD.LTFSDmSelRecRequest.FileName)
}

void LTFSDmSelRecRequest_FileName::InitAsDefaultInstance() {
}

LTFSDmSelRecRequest_FileName::LTFSDmSelRecRequest_FileName(const LTFSDmSelRecRequest_FileName& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LTFSDmD.LTFSDmSelRecRequest.FileName)
}

void LTFSDmSelRecRequest_FileName::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LTFSDmSelRecRequest_FileName::~LTFSDmSelRecRequest_FileName() {
  // @@protoc_insertion_point(destructor:LTFSDmD.LTFSDmSelRecRequest.FileName)
  SharedDtor();
}

void LTFSDmSelRecRequest_FileName::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LTFSDmSelRecRequest_FileName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTFSDmSelRecRequest_FileName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LTFSDmSelRecRequest_FileName_descriptor_;
}

const LTFSDmSelRecRequest_FileName& LTFSDmSelRecRequest_FileName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ltfsdm_2eproto();
  return *default_instance_;
}

LTFSDmSelRecRequest_FileName* LTFSDmSelRecRequest_FileName::default_instance_ = NULL;

LTFSDmSelRecRequest_FileName* LTFSDmSelRecRequest_FileName::New(::google::protobuf::Arena* arena) const {
  LTFSDmSelRecRequest_FileName* n = new LTFSDmSelRecRequest_FileName;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LTFSDmSelRecRequest_FileName::Clear() {
// @@protoc_insertion_point(message_clear_start:LTFSDmD.LTFSDmSelRecRequest.FileName)
  if (has_filename()) {
    filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LTFSDmSelRecRequest_FileName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LTFSDmD.LTFSDmSelRecRequest.FileName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string filename = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "LTFSDmD.LTFSDmSelRecRequest.FileName.filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LTFSDmD.LTFSDmSelRecRequest.FileName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LTFSDmD.LTFSDmSelRecRequest.FileName)
  return false;
#undef DO_
}

void LTFSDmSelRecRequest_FileName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LTFSDmD.LTFSDmSelRecRequest.FileName)
  // required string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LTFSDmD.LTFSDmSelRecRequest.FileName.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LTFSDmD.LTFSDmSelRecRequest.FileName)
}

::google::protobuf::uint8* LTFSDmSelRecRequest_FileName::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LTFSDmD.LTFSDmSelRecRequest.FileName)
  // required string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LTFSDmD.LTFSDmSelRecRequest.FileName.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LTFSDmD.LTFSDmSelRecRequest.FileName)
  return target;
}

int LTFSDmSelRecRequest_FileName::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:LTFSDmD.LTFSDmSelRecRequest.FileName)
  int total_size = 0;

  // required string filename = 1;
  if (has_filename()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTFSDmSelRecRequest_FileName::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LTFSDmD.LTFSDmSelRecRequest.FileName)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LTFSDmSelRecRequest_FileName* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LTFSDmSelRecRequest_FileName>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LTFSDmD.LTFSDmSelRecRequest.FileName)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LTFSDmD.LTFSDmSelRecRequest.FileName)
    MergeFrom(*source);
  }
}

void LTFSDmSelRecRequest_FileName::MergeFrom(const LTFSDmSelRecRequest_FileName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LTFSDmD.LTFSDmSelRecRequest.FileName)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LTFSDmSelRecRequest_FileName::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LTFSDmD.LTFSDmSelRecRequest.FileName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTFSDmSelRecRequest_FileName::CopyFrom(const LTFSDmSelRecRequest_FileName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LTFSDmD.LTFSDmSelRecRequest.FileName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTFSDmSelRecRequest_FileName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LTFSDmSelRecRequest_FileName::Swap(LTFSDmSelRecRequest_FileName* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LTFSDmSelRecRequest_FileName::InternalSwap(LTFSDmSelRecRequest_FileName* other) {
  filename_.Swap(&other->filename_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LTFSDmSelRecRequest_FileName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LTFSDmSelRecRequest_FileName_descriptor_;
  metadata.reflection = LTFSDmSelRecRequest_FileName_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LTFSDmSelRecRequest::kKeyFieldNumber;
const int LTFSDmSelRecRequest::kTokenFieldNumber;
const int LTFSDmSelRecRequest::kStateFieldNumber;
const int LTFSDmSelRecRequest::kFilenamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LTFSDmSelRecRequest::LTFSDmSelRecRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LTFSDmD.LTFSDmSelRecRequest)
}

void LTFSDmSelRecRequest::InitAsDefaultInstance() {
}

LTFSDmSelRecRequest::LTFSDmSelRecRequest(const LTFSDmSelRecRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LTFSDmD.LTFSDmSelRecRequest)
}

void LTFSDmSelRecRequest::SharedCtor() {
  _cached_size_ = 0;
  key_ = GOOGLE_ULONGLONG(0);
  token_ = GOOGLE_ULONGLONG(0);
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LTFSDmSelRecRequest::~LTFSDmSelRecRequest() {
  // @@protoc_insertion_point(destructor:LTFSDmD.LTFSDmSelRecRequest)
  SharedDtor();
}

void LTFSDmSelRecRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LTFSDmSelRecRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTFSDmSelRecRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LTFSDmSelRecRequest_descriptor_;
}

const LTFSDmSelRecRequest& LTFSDmSelRecRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ltfsdm_2eproto();
  return *default_instance_;
}

LTFSDmSelRecRequest* LTFSDmSelRecRequest::default_instance_ = NULL;

LTFSDmSelRecRequest* LTFSDmSelRecRequest::New(::google::protobuf::Arena* arena) const {
  LTFSDmSelRecRequest* n = new LTFSDmSelRecRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LTFSDmSelRecRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:LTFSDmD.LTFSDmSelRecRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LTFSDmSelRecRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LTFSDmSelRecRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(key_, token_);
    state_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  filenames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LTFSDmSelRecRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LTFSDmD.LTFSDmSelRecRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_token;
        break;
      }

      // required uint64 token = 2;
      case 2: {
        if (tag == 16) {
         parse_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &token_)));
          set_has_token();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // required .LTFSDmD.LTFSDmSelRecRequest.State state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LTFSDmD::LTFSDmSelRecRequest_State_IsValid(value)) {
            set_state(static_cast< ::LTFSDmD::LTFSDmSelRecRequest_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_filenames;
        break;
      }

      // repeated .LTFSDmD.LTFSDmSelRecRequest.FileName filenames = 4;
      case 4: {
        if (tag == 34) {
         parse_filenames:
          DO_(input->IncrementRecursionDepth());
         parse_loop_filenames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_filenames()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_filenames;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LTFSDmD.LTFSDmSelRecRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LTFSDmD.LTFSDmSelRecRequest)
  return false;
#undef DO_
}

void LTFSDmSelRecRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LTFSDmD.LTFSDmSelRecRequest)
  // required uint64 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->key(), output);
  }

  // required uint64 token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->token(), output);
  }

  // required .LTFSDmD.LTFSDmSelRecRequest.State state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // repeated .LTFSDmD.LTFSDmSelRecRequest.FileName filenames = 4;
  for (unsigned int i = 0, n = this->filenames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->filenames(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LTFSDmD.LTFSDmSelRecRequest)
}

::google::protobuf::uint8* LTFSDmSelRecRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LTFSDmD.LTFSDmSelRecRequest)
  // required uint64 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->key(), target);
  }

  // required uint64 token = 2;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->token(), target);
  }

  // required .LTFSDmD.LTFSDmSelRecRequest.State state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // repeated .LTFSDmD.LTFSDmSelRecRequest.FileName filenames = 4;
  for (unsigned int i = 0, n = this->filenames_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->filenames(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LTFSDmD.LTFSDmSelRecRequest)
  return target;
}

int LTFSDmSelRecRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:LTFSDmD.LTFSDmSelRecRequest)
  int total_size = 0;

  if (has_key()) {
    // required uint64 key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->key());
  }

  if (has_token()) {
    // required uint64 token = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->token());
  }

  if (has_state()) {
    // required .LTFSDmD.LTFSDmSelRecRequest.State state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  return total_size;
}
int LTFSDmSelRecRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:LTFSDmD.LTFSDmSelRecRequest)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->key());

    // required uint64 token = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->token());

    // required .LTFSDmD.LTFSDmSelRecRequest.State state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .LTFSDmD.LTFSDmSelRecRequest.FileName filenames = 4;
  total_size += 1 * this->filenames_size();
  for (int i = 0; i < this->filenames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->filenames(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTFSDmSelRecRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LTFSDmD.LTFSDmSelRecRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LTFSDmSelRecRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LTFSDmSelRecRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LTFSDmD.LTFSDmSelRecRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LTFSDmD.LTFSDmSelRecRequest)
    MergeFrom(*source);
  }
}

void LTFSDmSelRecRequest::MergeFrom(const LTFSDmSelRecRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LTFSDmD.LTFSDmSelRecRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  filenames_.MergeFrom(from.filenames_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LTFSDmSelRecRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LTFSDmD.LTFSDmSelRecRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTFSDmSelRecRequest::CopyFrom(const LTFSDmSelRecRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LTFSDmD.LTFSDmSelRecRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTFSDmSelRecRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->filenames())) return false;
  return true;
}

void LTFSDmSelRecRequest::Swap(LTFSDmSelRecRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LTFSDmSelRecRequest::InternalSwap(LTFSDmSelRecRequest* other) {
  std::swap(key_, other->key_);
  std::swap(token_, other->token_);
  std::swap(state_, other->state_);
  filenames_.UnsafeArenaSwap(&other->filenames_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LTFSDmSelRecRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LTFSDmSelRecRequest_descriptor_;
  metadata.reflection = LTFSDmSelRecRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LTFSDmSelRecRequest_FileName

// required string filename = 1;
bool LTFSDmSelRecRequest_FileName::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LTFSDmSelRecRequest_FileName::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
void LTFSDmSelRecRequest_FileName::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
void LTFSDmSelRecRequest_FileName::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
 const ::std::string& LTFSDmSelRecRequest_FileName::filename() const {
  // @@protoc_insertion_point(field_get:LTFSDmD.LTFSDmSelRecRequest.FileName.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LTFSDmSelRecRequest_FileName::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LTFSDmD.LTFSDmSelRecRequest.FileName.filename)
}
 void LTFSDmSelRecRequest_FileName::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LTFSDmD.LTFSDmSelRecRequest.FileName.filename)
}
 void LTFSDmSelRecRequest_FileName::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LTFSDmD.LTFSDmSelRecRequest.FileName.filename)
}
 ::std::string* LTFSDmSelRecRequest_FileName::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:LTFSDmD.LTFSDmSelRecRequest.FileName.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LTFSDmSelRecRequest_FileName::release_filename() {
  // @@protoc_insertion_point(field_release:LTFSDmD.LTFSDmSelRecRequest.FileName.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LTFSDmSelRecRequest_FileName::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:LTFSDmD.LTFSDmSelRecRequest.FileName.filename)
}

// -------------------------------------------------------------------

// LTFSDmSelRecRequest

// required uint64 key = 1;
bool LTFSDmSelRecRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LTFSDmSelRecRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void LTFSDmSelRecRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void LTFSDmSelRecRequest::clear_key() {
  key_ = GOOGLE_ULONGLONG(0);
  clear_has_key();
}
 ::google::protobuf::uint64 LTFSDmSelRecRequest::key() const {
  // @@protoc_insertion_point(field_get:LTFSDmD.LTFSDmSelRecRequest.key)
  return key_;
}
 void LTFSDmSelRecRequest::set_key(::google::protobuf::uint64 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:LTFSDmD.LTFSDmSelRecRequest.key)
}

// required uint64 token = 2;
bool LTFSDmSelRecRequest::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LTFSDmSelRecRequest::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
void LTFSDmSelRecRequest::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
void LTFSDmSelRecRequest::clear_token() {
  token_ = GOOGLE_ULONGLONG(0);
  clear_has_token();
}
 ::google::protobuf::uint64 LTFSDmSelRecRequest::token() const {
  // @@protoc_insertion_point(field_get:LTFSDmD.LTFSDmSelRecRequest.token)
  return token_;
}
 void LTFSDmSelRecRequest::set_token(::google::protobuf::uint64 value) {
  set_has_token();
  token_ = value;
  // @@protoc_insertion_point(field_set:LTFSDmD.LTFSDmSelRecRequest.token)
}

// required .LTFSDmD.LTFSDmSelRecRequest.State state = 3;
bool LTFSDmSelRecRequest::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LTFSDmSelRecRequest::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
void LTFSDmSelRecRequest::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
void LTFSDmSelRecRequest::clear_state() {
  state_ = 0;
  clear_has_state();
}
 ::LTFSDmD::LTFSDmSelRecRequest_State LTFSDmSelRecRequest::state() const {
  // @@protoc_insertion_point(field_get:LTFSDmD.LTFSDmSelRecRequest.state)
  return static_cast< ::LTFSDmD::LTFSDmSelRecRequest_State >(state_);
}
 void LTFSDmSelRecRequest::set_state(::LTFSDmD::LTFSDmSelRecRequest_State value) {
  assert(::LTFSDmD::LTFSDmSelRecRequest_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:LTFSDmD.LTFSDmSelRecRequest.state)
}

// repeated .LTFSDmD.LTFSDmSelRecRequest.FileName filenames = 4;
int LTFSDmSelRecRequest::filenames_size() const {
  return filenames_.size();
}
void LTFSDmSelRecRequest::clear_filenames() {
  filenames_.Clear();
}
const ::LTFSDmD::LTFSDmSelRecRequest_FileName& LTFSDmSelRecRequest::filenames(int index) const {
  // @@protoc_insertion_point(field_get:LTFSDmD.LTFSDmSelRecRequest.filenames)
  return filenames_.Get(index);
}
::LTFSDmD::LTFSDmSelRecRequest_FileName* LTFSDmSelRecRequest::mutable_filenames(int index) {
  // @@protoc_insertion_point(field_mutable:LTFSDmD.LTFSDmSelRecRequest.filenames)
  return filenames_.Mutable(index);
}
::LTFSDmD::LTFSDmSelRecRequest_FileName* LTFSDmSelRecRequest::add_filenames() {
  // @@protoc_insertion_point(field_add:LTFSDmD.LTFSDmSelRecRequest.filenames)
  return filenames_.Add();
}
::google::protobuf::RepeatedPtrField< ::LTFSDmD::LTFSDmSelRecRequest_FileName >*
LTFSDmSelRecRequest::mutable_filenames() {
  // @@protoc_insertion_point(field_mutable_list:LTFSDmD.LTFSDmSelRecRequest.filenames)
  return &filenames_;
}
const ::google::protobuf::RepeatedPtrField< ::LTFSDmD::LTFSDmSelRecRequest_FileName >&
LTFSDmSelRecRequest::filenames() const {
  // @@protoc_insertion_point(field_list:LTFSDmD.LTFSDmSelRecRequest.filenames)
  return filenames_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* LTFSDmTransRecRequest_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LTFSDmTransRecRequest_State_descriptor_;
}
bool LTFSDmTransRecRequest_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LTFSDmTransRecRequest_State LTFSDmTransRecRequest::PREMIGRATED;
const LTFSDmTransRecRequest_State LTFSDmTransRecRequest::MIGRATED;
const LTFSDmTransRecRequest_State LTFSDmTransRecRequest::State_MIN;
const LTFSDmTransRecRequest_State LTFSDmTransRecRequest::State_MAX;
const int LTFSDmTransRecRequest::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LTFSDmTransRecRequest::kKeyFieldNumber;
const int LTFSDmTransRecRequest::kTokenFieldNumber;
const int LTFSDmTransRecRequest::kStateFieldNumber;
const int LTFSDmTransRecRequest::kFsidFieldNumber;
const int LTFSDmTransRecRequest::kIgenFieldNumber;
const int LTFSDmTransRecRequest::kInumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LTFSDmTransRecRequest::LTFSDmTransRecRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LTFSDmD.LTFSDmTransRecRequest)
}

void LTFSDmTransRecRequest::InitAsDefaultInstance() {
}

LTFSDmTransRecRequest::LTFSDmTransRecRequest(const LTFSDmTransRecRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LTFSDmD.LTFSDmTransRecRequest)
}

void LTFSDmTransRecRequest::SharedCtor() {
  _cached_size_ = 0;
  key_ = GOOGLE_ULONGLONG(0);
  token_ = GOOGLE_ULONGLONG(0);
  state_ = 0;
  fsid_ = GOOGLE_ULONGLONG(0);
  igen_ = GOOGLE_ULONGLONG(0);
  inum_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LTFSDmTransRecRequest::~LTFSDmTransRecRequest() {
  // @@protoc_insertion_point(destructor:LTFSDmD.LTFSDmTransRecRequest)
  SharedDtor();
}

void LTFSDmTransRecRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LTFSDmTransRecRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTFSDmTransRecRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LTFSDmTransRecRequest_descriptor_;
}

const LTFSDmTransRecRequest& LTFSDmTransRecRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ltfsdm_2eproto();
  return *default_instance_;
}

LTFSDmTransRecRequest* LTFSDmTransRecRequest::default_instance_ = NULL;

LTFSDmTransRecRequest* LTFSDmTransRecRequest::New(::google::protobuf::Arena* arena) const {
  LTFSDmTransRecRequest* n = new LTFSDmTransRecRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LTFSDmTransRecRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:LTFSDmD.LTFSDmTransRecRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LTFSDmTransRecRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LTFSDmTransRecRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(key_, state_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LTFSDmTransRecRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LTFSDmD.LTFSDmTransRecRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_token;
        break;
      }

      // required uint64 token = 2;
      case 2: {
        if (tag == 16) {
         parse_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &token_)));
          set_has_token();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // required .LTFSDmD.LTFSDmTransRecRequest.State state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LTFSDmD::LTFSDmTransRecRequest_State_IsValid(value)) {
            set_state(static_cast< ::LTFSDmD::LTFSDmTransRecRequest_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fsid;
        break;
      }

      // required uint64 fsid = 4;
      case 4: {
        if (tag == 32) {
         parse_fsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fsid_)));
          set_has_fsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_igen;
        break;
      }

      // required uint64 igen = 5;
      case 5: {
        if (tag == 40) {
         parse_igen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &igen_)));
          set_has_igen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_inum;
        break;
      }

      // required uint64 inum = 6;
      case 6: {
        if (tag == 48) {
         parse_inum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inum_)));
          set_has_inum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LTFSDmD.LTFSDmTransRecRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LTFSDmD.LTFSDmTransRecRequest)
  return false;
#undef DO_
}

void LTFSDmTransRecRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LTFSDmD.LTFSDmTransRecRequest)
  // required uint64 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->key(), output);
  }

  // required uint64 token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->token(), output);
  }

  // required .LTFSDmD.LTFSDmTransRecRequest.State state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // required uint64 fsid = 4;
  if (has_fsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->fsid(), output);
  }

  // required uint64 igen = 5;
  if (has_igen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->igen(), output);
  }

  // required uint64 inum = 6;
  if (has_inum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->inum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LTFSDmD.LTFSDmTransRecRequest)
}

::google::protobuf::uint8* LTFSDmTransRecRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LTFSDmD.LTFSDmTransRecRequest)
  // required uint64 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->key(), target);
  }

  // required uint64 token = 2;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->token(), target);
  }

  // required .LTFSDmD.LTFSDmTransRecRequest.State state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // required uint64 fsid = 4;
  if (has_fsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->fsid(), target);
  }

  // required uint64 igen = 5;
  if (has_igen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->igen(), target);
  }

  // required uint64 inum = 6;
  if (has_inum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->inum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LTFSDmD.LTFSDmTransRecRequest)
  return target;
}

int LTFSDmTransRecRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:LTFSDmD.LTFSDmTransRecRequest)
  int total_size = 0;

  if (has_key()) {
    // required uint64 key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->key());
  }

  if (has_token()) {
    // required uint64 token = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->token());
  }

  if (has_state()) {
    // required .LTFSDmD.LTFSDmTransRecRequest.State state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  if (has_fsid()) {
    // required uint64 fsid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fsid());
  }

  if (has_igen()) {
    // required uint64 igen = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->igen());
  }

  if (has_inum()) {
    // required uint64 inum = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->inum());
  }

  return total_size;
}
int LTFSDmTransRecRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:LTFSDmD.LTFSDmTransRecRequest)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required uint64 key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->key());

    // required uint64 token = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->token());

    // required .LTFSDmD.LTFSDmTransRecRequest.State state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());

    // required uint64 fsid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fsid());

    // required uint64 igen = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->igen());

    // required uint64 inum = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->inum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTFSDmTransRecRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LTFSDmD.LTFSDmTransRecRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LTFSDmTransRecRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LTFSDmTransRecRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LTFSDmD.LTFSDmTransRecRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LTFSDmD.LTFSDmTransRecRequest)
    MergeFrom(*source);
  }
}

void LTFSDmTransRecRequest::MergeFrom(const LTFSDmTransRecRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LTFSDmD.LTFSDmTransRecRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_fsid()) {
      set_fsid(from.fsid());
    }
    if (from.has_igen()) {
      set_igen(from.igen());
    }
    if (from.has_inum()) {
      set_inum(from.inum());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LTFSDmTransRecRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LTFSDmD.LTFSDmTransRecRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTFSDmTransRecRequest::CopyFrom(const LTFSDmTransRecRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LTFSDmD.LTFSDmTransRecRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTFSDmTransRecRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void LTFSDmTransRecRequest::Swap(LTFSDmTransRecRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LTFSDmTransRecRequest::InternalSwap(LTFSDmTransRecRequest* other) {
  std::swap(key_, other->key_);
  std::swap(token_, other->token_);
  std::swap(state_, other->state_);
  std::swap(fsid_, other->fsid_);
  std::swap(igen_, other->igen_);
  std::swap(inum_, other->inum_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LTFSDmTransRecRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LTFSDmTransRecRequest_descriptor_;
  metadata.reflection = LTFSDmTransRecRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LTFSDmTransRecRequest

// required uint64 key = 1;
bool LTFSDmTransRecRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LTFSDmTransRecRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void LTFSDmTransRecRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void LTFSDmTransRecRequest::clear_key() {
  key_ = GOOGLE_ULONGLONG(0);
  clear_has_key();
}
 ::google::protobuf::uint64 LTFSDmTransRecRequest::key() const {
  // @@protoc_insertion_point(field_get:LTFSDmD.LTFSDmTransRecRequest.key)
  return key_;
}
 void LTFSDmTransRecRequest::set_key(::google::protobuf::uint64 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:LTFSDmD.LTFSDmTransRecRequest.key)
}

// required uint64 token = 2;
bool LTFSDmTransRecRequest::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LTFSDmTransRecRequest::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
void LTFSDmTransRecRequest::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
void LTFSDmTransRecRequest::clear_token() {
  token_ = GOOGLE_ULONGLONG(0);
  clear_has_token();
}
 ::google::protobuf::uint64 LTFSDmTransRecRequest::token() const {
  // @@protoc_insertion_point(field_get:LTFSDmD.LTFSDmTransRecRequest.token)
  return token_;
}
 void LTFSDmTransRecRequest::set_token(::google::protobuf::uint64 value) {
  set_has_token();
  token_ = value;
  // @@protoc_insertion_point(field_set:LTFSDmD.LTFSDmTransRecRequest.token)
}

// required .LTFSDmD.LTFSDmTransRecRequest.State state = 3;
bool LTFSDmTransRecRequest::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LTFSDmTransRecRequest::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
void LTFSDmTransRecRequest::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
void LTFSDmTransRecRequest::clear_state() {
  state_ = 0;
  clear_has_state();
}
 ::LTFSDmD::LTFSDmTransRecRequest_State LTFSDmTransRecRequest::state() const {
  // @@protoc_insertion_point(field_get:LTFSDmD.LTFSDmTransRecRequest.state)
  return static_cast< ::LTFSDmD::LTFSDmTransRecRequest_State >(state_);
}
 void LTFSDmTransRecRequest::set_state(::LTFSDmD::LTFSDmTransRecRequest_State value) {
  assert(::LTFSDmD::LTFSDmTransRecRequest_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:LTFSDmD.LTFSDmTransRecRequest.state)
}

// required uint64 fsid = 4;
bool LTFSDmTransRecRequest::has_fsid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LTFSDmTransRecRequest::set_has_fsid() {
  _has_bits_[0] |= 0x00000008u;
}
void LTFSDmTransRecRequest::clear_has_fsid() {
  _has_bits_[0] &= ~0x00000008u;
}
void LTFSDmTransRecRequest::clear_fsid() {
  fsid_ = GOOGLE_ULONGLONG(0);
  clear_has_fsid();
}
 ::google::protobuf::uint64 LTFSDmTransRecRequest::fsid() const {
  // @@protoc_insertion_point(field_get:LTFSDmD.LTFSDmTransRecRequest.fsid)
  return fsid_;
}
 void LTFSDmTransRecRequest::set_fsid(::google::protobuf::uint64 value) {
  set_has_fsid();
  fsid_ = value;
  // @@protoc_insertion_point(field_set:LTFSDmD.LTFSDmTransRecRequest.fsid)
}

// required uint64 igen = 5;
bool LTFSDmTransRecRequest::has_igen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LTFSDmTransRecRequest::set_has_igen() {
  _has_bits_[0] |= 0x00000010u;
}
void LTFSDmTransRecRequest::clear_has_igen() {
  _has_bits_[0] &= ~0x00000010u;
}
void LTFSDmTransRecRequest::clear_igen() {
  igen_ = GOOGLE_ULONGLONG(0);
  clear_has_igen();
}
 ::google::protobuf::uint64 LTFSDmTransRecRequest::igen() const {
  // @@protoc_insertion_point(field_get:LTFSDmD.LTFSDmTransRecRequest.igen)
  return igen_;
}
 void LTFSDmTransRecRequest::set_igen(::google::protobuf::uint64 value) {
  set_has_igen();
  igen_ = value;
  // @@protoc_insertion_point(field_set:LTFSDmD.LTFSDmTransRecRequest.igen)
}

// required uint64 inum = 6;
bool LTFSDmTransRecRequest::has_inum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LTFSDmTransRecRequest::set_has_inum() {
  _has_bits_[0] |= 0x00000020u;
}
void LTFSDmTransRecRequest::clear_has_inum() {
  _has_bits_[0] &= ~0x00000020u;
}
void LTFSDmTransRecRequest::clear_inum() {
  inum_ = GOOGLE_ULONGLONG(0);
  clear_has_inum();
}
 ::google::protobuf::uint64 LTFSDmTransRecRequest::inum() const {
  // @@protoc_insertion_point(field_get:LTFSDmD.LTFSDmTransRecRequest.inum)
  return inum_;
}
 void LTFSDmTransRecRequest::set_inum(::google::protobuf::uint64 value) {
  set_has_inum();
  inum_ = value;
  // @@protoc_insertion_point(field_set:LTFSDmD.LTFSDmTransRecRequest.inum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Command::kMigrequestFieldNumber;
const int Command::kMigrequestrespFieldNumber;
const int Command::kSelrecrequestFieldNumber;
const int Command::kTransrecrequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Command::Command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LTFSDmD.Command)
}

void Command::InitAsDefaultInstance() {
  Command_default_oneof_instance_->migrequest_ = const_cast< ::LTFSDmD::LTFSDmMigRequest*>(&::LTFSDmD::LTFSDmMigRequest::default_instance());
  Command_default_oneof_instance_->migrequestresp_ = const_cast< ::LTFSDmD::LTFSDmMigRequestResp*>(&::LTFSDmD::LTFSDmMigRequestResp::default_instance());
  Command_default_oneof_instance_->selrecrequest_ = const_cast< ::LTFSDmD::LTFSDmSelRecRequest*>(&::LTFSDmD::LTFSDmSelRecRequest::default_instance());
  Command_default_oneof_instance_->transrecrequest_ = const_cast< ::LTFSDmD::LTFSDmTransRecRequest*>(&::LTFSDmD::LTFSDmTransRecRequest::default_instance());
}

Command::Command(const Command& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LTFSDmD.Command)
}

void Command::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_commands();
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:LTFSDmD.Command)
  SharedDtor();
}

void Command::SharedDtor() {
  if (has_commands()) {
    clear_commands();
  }
  if (this != default_instance_) {
  }
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}

const Command& Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ltfsdm_2eproto();
  return *default_instance_;
}

Command* Command::default_instance_ = NULL;

Command* Command::New(::google::protobuf::Arena* arena) const {
  Command* n = new Command;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Command::clear_commands() {
// @@protoc_insertion_point(one_of_clear_start:LTFSDmD.Command)
  switch(commands_case()) {
    case kMigrequest: {
      delete commands_.migrequest_;
      break;
    }
    case kMigrequestresp: {
      delete commands_.migrequestresp_;
      break;
    }
    case kSelrecrequest: {
      delete commands_.selrecrequest_;
      break;
    }
    case kTransrecrequest: {
      delete commands_.transrecrequest_;
      break;
    }
    case COMMANDS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMANDS_NOT_SET;
}


void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:LTFSDmD.Command)
  clear_commands();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LTFSDmD.Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LTFSDmD.LTFSDmMigRequest migrequest = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_migrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_migrequestresp;
        break;
      }

      // optional .LTFSDmD.LTFSDmMigRequestResp migrequestresp = 2;
      case 2: {
        if (tag == 18) {
         parse_migrequestresp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_migrequestresp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_selrecrequest;
        break;
      }

      // optional .LTFSDmD.LTFSDmSelRecRequest selrecrequest = 3;
      case 3: {
        if (tag == 26) {
         parse_selrecrequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selrecrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_transrecrequest;
        break;
      }

      // optional .LTFSDmD.LTFSDmTransRecRequest transrecrequest = 4;
      case 4: {
        if (tag == 34) {
         parse_transrecrequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transrecrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LTFSDmD.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LTFSDmD.Command)
  return false;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LTFSDmD.Command)
  // optional .LTFSDmD.LTFSDmMigRequest migrequest = 1;
  if (has_migrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *commands_.migrequest_, output);
  }

  // optional .LTFSDmD.LTFSDmMigRequestResp migrequestresp = 2;
  if (has_migrequestresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *commands_.migrequestresp_, output);
  }

  // optional .LTFSDmD.LTFSDmSelRecRequest selrecrequest = 3;
  if (has_selrecrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *commands_.selrecrequest_, output);
  }

  // optional .LTFSDmD.LTFSDmTransRecRequest transrecrequest = 4;
  if (has_transrecrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *commands_.transrecrequest_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LTFSDmD.Command)
}

::google::protobuf::uint8* Command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LTFSDmD.Command)
  // optional .LTFSDmD.LTFSDmMigRequest migrequest = 1;
  if (has_migrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *commands_.migrequest_, false, target);
  }

  // optional .LTFSDmD.LTFSDmMigRequestResp migrequestresp = 2;
  if (has_migrequestresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *commands_.migrequestresp_, false, target);
  }

  // optional .LTFSDmD.LTFSDmSelRecRequest selrecrequest = 3;
  if (has_selrecrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *commands_.selrecrequest_, false, target);
  }

  // optional .LTFSDmD.LTFSDmTransRecRequest transrecrequest = 4;
  if (has_transrecrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *commands_.transrecrequest_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LTFSDmD.Command)
  return target;
}

int Command::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:LTFSDmD.Command)
  int total_size = 0;

  switch (commands_case()) {
    // optional .LTFSDmD.LTFSDmMigRequest migrequest = 1;
    case kMigrequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *commands_.migrequest_);
      break;
    }
    // optional .LTFSDmD.LTFSDmMigRequestResp migrequestresp = 2;
    case kMigrequestresp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *commands_.migrequestresp_);
      break;
    }
    // optional .LTFSDmD.LTFSDmSelRecRequest selrecrequest = 3;
    case kSelrecrequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *commands_.selrecrequest_);
      break;
    }
    // optional .LTFSDmD.LTFSDmTransRecRequest transrecrequest = 4;
    case kTransrecrequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *commands_.transrecrequest_);
      break;
    }
    case COMMANDS_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LTFSDmD.Command)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Command* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LTFSDmD.Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LTFSDmD.Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LTFSDmD.Command)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.commands_case()) {
    case kMigrequest: {
      mutable_migrequest()->::LTFSDmD::LTFSDmMigRequest::MergeFrom(from.migrequest());
      break;
    }
    case kMigrequestresp: {
      mutable_migrequestresp()->::LTFSDmD::LTFSDmMigRequestResp::MergeFrom(from.migrequestresp());
      break;
    }
    case kSelrecrequest: {
      mutable_selrecrequest()->::LTFSDmD::LTFSDmSelRecRequest::MergeFrom(from.selrecrequest());
      break;
    }
    case kTransrecrequest: {
      mutable_transrecrequest()->::LTFSDmD::LTFSDmTransRecRequest::MergeFrom(from.transrecrequest());
      break;
    }
    case COMMANDS_NOT_SET: {
      break;
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LTFSDmD.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LTFSDmD.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {

  if (has_migrequest()) {
    if (!this->migrequest().IsInitialized()) return false;
  }
  if (has_migrequestresp()) {
    if (!this->migrequestresp().IsInitialized()) return false;
  }
  if (has_selrecrequest()) {
    if (!this->selrecrequest().IsInitialized()) return false;
  }
  if (has_transrecrequest()) {
    if (!this->transrecrequest().IsInitialized()) return false;
  }
  return true;
}

void Command::Swap(Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Command::InternalSwap(Command* other) {
  std::swap(commands_, other->commands_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Command_descriptor_;
  metadata.reflection = Command_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Command

// optional .LTFSDmD.LTFSDmMigRequest migrequest = 1;
bool Command::has_migrequest() const {
  return commands_case() == kMigrequest;
}
void Command::set_has_migrequest() {
  _oneof_case_[0] = kMigrequest;
}
void Command::clear_migrequest() {
  if (has_migrequest()) {
    delete commands_.migrequest_;
    clear_has_commands();
  }
}
 const ::LTFSDmD::LTFSDmMigRequest& Command::migrequest() const {
  // @@protoc_insertion_point(field_get:LTFSDmD.Command.migrequest)
  return has_migrequest()
      ? *commands_.migrequest_
      : ::LTFSDmD::LTFSDmMigRequest::default_instance();
}
::LTFSDmD::LTFSDmMigRequest* Command::mutable_migrequest() {
  if (!has_migrequest()) {
    clear_commands();
    set_has_migrequest();
    commands_.migrequest_ = new ::LTFSDmD::LTFSDmMigRequest;
  }
  // @@protoc_insertion_point(field_mutable:LTFSDmD.Command.migrequest)
  return commands_.migrequest_;
}
::LTFSDmD::LTFSDmMigRequest* Command::release_migrequest() {
  // @@protoc_insertion_point(field_release:LTFSDmD.Command.migrequest)
  if (has_migrequest()) {
    clear_has_commands();
    ::LTFSDmD::LTFSDmMigRequest* temp = commands_.migrequest_;
    commands_.migrequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Command::set_allocated_migrequest(::LTFSDmD::LTFSDmMigRequest* migrequest) {
  clear_commands();
  if (migrequest) {
    set_has_migrequest();
    commands_.migrequest_ = migrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:LTFSDmD.Command.migrequest)
}

// optional .LTFSDmD.LTFSDmMigRequestResp migrequestresp = 2;
bool Command::has_migrequestresp() const {
  return commands_case() == kMigrequestresp;
}
void Command::set_has_migrequestresp() {
  _oneof_case_[0] = kMigrequestresp;
}
void Command::clear_migrequestresp() {
  if (has_migrequestresp()) {
    delete commands_.migrequestresp_;
    clear_has_commands();
  }
}
 const ::LTFSDmD::LTFSDmMigRequestResp& Command::migrequestresp() const {
  // @@protoc_insertion_point(field_get:LTFSDmD.Command.migrequestresp)
  return has_migrequestresp()
      ? *commands_.migrequestresp_
      : ::LTFSDmD::LTFSDmMigRequestResp::default_instance();
}
::LTFSDmD::LTFSDmMigRequestResp* Command::mutable_migrequestresp() {
  if (!has_migrequestresp()) {
    clear_commands();
    set_has_migrequestresp();
    commands_.migrequestresp_ = new ::LTFSDmD::LTFSDmMigRequestResp;
  }
  // @@protoc_insertion_point(field_mutable:LTFSDmD.Command.migrequestresp)
  return commands_.migrequestresp_;
}
::LTFSDmD::LTFSDmMigRequestResp* Command::release_migrequestresp() {
  // @@protoc_insertion_point(field_release:LTFSDmD.Command.migrequestresp)
  if (has_migrequestresp()) {
    clear_has_commands();
    ::LTFSDmD::LTFSDmMigRequestResp* temp = commands_.migrequestresp_;
    commands_.migrequestresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Command::set_allocated_migrequestresp(::LTFSDmD::LTFSDmMigRequestResp* migrequestresp) {
  clear_commands();
  if (migrequestresp) {
    set_has_migrequestresp();
    commands_.migrequestresp_ = migrequestresp;
  }
  // @@protoc_insertion_point(field_set_allocated:LTFSDmD.Command.migrequestresp)
}

// optional .LTFSDmD.LTFSDmSelRecRequest selrecrequest = 3;
bool Command::has_selrecrequest() const {
  return commands_case() == kSelrecrequest;
}
void Command::set_has_selrecrequest() {
  _oneof_case_[0] = kSelrecrequest;
}
void Command::clear_selrecrequest() {
  if (has_selrecrequest()) {
    delete commands_.selrecrequest_;
    clear_has_commands();
  }
}
 const ::LTFSDmD::LTFSDmSelRecRequest& Command::selrecrequest() const {
  // @@protoc_insertion_point(field_get:LTFSDmD.Command.selrecrequest)
  return has_selrecrequest()
      ? *commands_.selrecrequest_
      : ::LTFSDmD::LTFSDmSelRecRequest::default_instance();
}
::LTFSDmD::LTFSDmSelRecRequest* Command::mutable_selrecrequest() {
  if (!has_selrecrequest()) {
    clear_commands();
    set_has_selrecrequest();
    commands_.selrecrequest_ = new ::LTFSDmD::LTFSDmSelRecRequest;
  }
  // @@protoc_insertion_point(field_mutable:LTFSDmD.Command.selrecrequest)
  return commands_.selrecrequest_;
}
::LTFSDmD::LTFSDmSelRecRequest* Command::release_selrecrequest() {
  // @@protoc_insertion_point(field_release:LTFSDmD.Command.selrecrequest)
  if (has_selrecrequest()) {
    clear_has_commands();
    ::LTFSDmD::LTFSDmSelRecRequest* temp = commands_.selrecrequest_;
    commands_.selrecrequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Command::set_allocated_selrecrequest(::LTFSDmD::LTFSDmSelRecRequest* selrecrequest) {
  clear_commands();
  if (selrecrequest) {
    set_has_selrecrequest();
    commands_.selrecrequest_ = selrecrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:LTFSDmD.Command.selrecrequest)
}

// optional .LTFSDmD.LTFSDmTransRecRequest transrecrequest = 4;
bool Command::has_transrecrequest() const {
  return commands_case() == kTransrecrequest;
}
void Command::set_has_transrecrequest() {
  _oneof_case_[0] = kTransrecrequest;
}
void Command::clear_transrecrequest() {
  if (has_transrecrequest()) {
    delete commands_.transrecrequest_;
    clear_has_commands();
  }
}
 const ::LTFSDmD::LTFSDmTransRecRequest& Command::transrecrequest() const {
  // @@protoc_insertion_point(field_get:LTFSDmD.Command.transrecrequest)
  return has_transrecrequest()
      ? *commands_.transrecrequest_
      : ::LTFSDmD::LTFSDmTransRecRequest::default_instance();
}
::LTFSDmD::LTFSDmTransRecRequest* Command::mutable_transrecrequest() {
  if (!has_transrecrequest()) {
    clear_commands();
    set_has_transrecrequest();
    commands_.transrecrequest_ = new ::LTFSDmD::LTFSDmTransRecRequest;
  }
  // @@protoc_insertion_point(field_mutable:LTFSDmD.Command.transrecrequest)
  return commands_.transrecrequest_;
}
::LTFSDmD::LTFSDmTransRecRequest* Command::release_transrecrequest() {
  // @@protoc_insertion_point(field_release:LTFSDmD.Command.transrecrequest)
  if (has_transrecrequest()) {
    clear_has_commands();
    ::LTFSDmD::LTFSDmTransRecRequest* temp = commands_.transrecrequest_;
    commands_.transrecrequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Command::set_allocated_transrecrequest(::LTFSDmD::LTFSDmTransRecRequest* transrecrequest) {
  clear_commands();
  if (transrecrequest) {
    set_has_transrecrequest();
    commands_.transrecrequest_ = transrecrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:LTFSDmD.Command.transrecrequest)
}

bool Command::has_commands() const {
  return commands_case() != COMMANDS_NOT_SET;
}
void Command::clear_has_commands() {
  _oneof_case_[0] = COMMANDS_NOT_SET;
}
Command::CommandsCase Command::commands_case() const {
  return Command::CommandsCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace LTFSDmD

// @@protoc_insertion_point(global_scope)
