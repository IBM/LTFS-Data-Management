/*******************************************************************************
 * Copyright 2018 IBM Corp. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *******************************************************************************/

syntax = "proto3";

package LTFSDmProtocol;

message LTFSDmReqNumber {
	uint64 key = 1;
}

message LTFSDmReqNumberResp {
	bool success = 1;
	int64 reqNumber = 2;
}

message LTFSDmSendObjects {
	message FileName {
		bytes filename = 1;
	}
	repeated FileName filenames = 1;
}

message LTFSDmSendObjectsResp {
	int64 error = 1;
	int64 reqNumber = 2;
	int64 pid = 3;
}

message LTFSDmMigRequest {
	uint64 key = 1;
	int64 reqNumber = 2;
	uint64 pid = 3;
	int64 state = 4;
	bytes pools = 5;
}

message LTFSDmMigRequestResp {
	int64 error = 1;
	int64 reqNumber = 2;
	int64 pid = 3;
}

message LTFSDmSelRecRequest {
	uint64 key = 1;
	int64 reqNumber = 2;
	uint64 pid = 3;
	int64 state = 4;
}

message LTFSDmSelRecRequestResp {
	int64 error = 1;
	int64 reqNumber = 2;
	int64 pid = 3;
}

message LTFSDmStopRequest {
	uint64 key = 1;
	int64 reqNumber = 2;
	bool forced = 3;
	bool finish = 4;
}

message LTFSDmStopResp {
	bool success = 1;
}

message LTFSDmStatusRequest {
	uint64 key = 1;
	int64 reqNumber = 2;
}

message LTFSDmStatusResp {
	bool success = 1;
	int64 pid = 2;
}

message LTFSDmReqStatusRequest {
	uint64 key = 1;
	int64 reqNumber = 2;
	int64 pid = 3;
}

message LTFSDmReqStatusResp {
	bool success = 1;
	int64 reqNumber = 2;
	int64 pid = 3;
	int64 resident = 4;
	int64 transferred = 5;
	int64 premigrated = 6;
	int64 migrated = 7;
	int64 failed = 8;
	bool done = 9;
}

message LTFSDmAddRequest {
	uint64 key = 1;
	int64 reqNumber = 2;
	bytes managedFs = 3;
}

message LTFSDmAddResp {
	enum AddResp {
		SUCCESS = 0;
		ALREADY_ADDED = 1;
		FAILED = 2;
	}
	AddResp response = 1;
}

message LTFSDmInfoRequestsRequest {
	uint64 key = 1;
	int64 reqNumber = 2;
}

message LTFSDmInfoRequestsResp {
	bytes operation = 1;
	int64 reqnumber = 2;
	bytes tapeid = 3;
	bytes targetstate = 4;
	bytes state = 5;
	bytes pool = 6;
}

message LTFSDmInfoJobsRequest {
	uint64 key = 1;
	int64 reqNumber = 2;
}

message LTFSDmInfoJobsResp {
	bytes operation = 1;
	bytes filename = 2;
	int64 reqnumber = 3;
	bytes pool = 4;
	int64 filesize = 5;
	bytes tapeid = 6;
	int64 state = 7;
}

message LTFSDmInfoDrivesRequest {
	uint64 key = 1;
}

message LTFSDmInfoDrivesResp {
	bytes id = 1;
	bytes devname = 2;
	uint64 slot = 3;
	bytes status = 4;
	bool busy = 5;
}

message LTFSDmInfoTapesRequest {
	uint64 key = 1;
}

message LTFSDmInfoTapesResp {
	bytes id = 1;
	uint64 slot = 2;
	uint64 totalcap = 3;
	uint64 remaincap = 4;
	uint64 reclaimable = 5;
	bytes status = 6;
	uint64 inprogress = 7;
	bytes pool = 8;
	bytes state = 9;
}

message LTFSDmPoolCreateRequest {
	uint64 key = 1;
	bytes poolname = 2;
}

message LTFSDmPoolDeleteRequest {
	uint64 key = 1;
	bytes poolname = 2;
}

message LTFSDmPoolAddRequest {
	uint64 key = 1;
	bool format = 2;
	bool check = 3;
	bytes poolname = 4;
	repeated bytes tapeid = 5;
}

message LTFSDmPoolRemoveRequest {
	uint64 key = 1;
	bytes poolname = 2;
	repeated bytes tapeid = 3;
}

message LTFSDmPoolResp {
	int64 response = 1;
	optional bytes tapeid = 2;
}

message LTFSDmInfoPoolsRequest {
	uint64 key = 1;
}

message LTFSDmInfoPoolsResp {
	bytes poolname = 1;
	uint64 total = 2;
	uint64 free = 3;
	uint64 unref = 4;
	uint64 numtapes = 5;
}

message LTFSDmRetrieveRequest {
	uint64 key = 1;
}

message LTFSDmRetrieveResp {
	int64 error = 1;
}

message LTFSDmTransRecRequest {
	int64 key = 1;
    bool toresident = 2;
    int64 fsidh = 3;
    int64 fsidl = 4;
    int32 igen = 5;
    int64 inum = 6;
    bytes filename = 7;
}

message LTFSDmTransRecResp {
	bool success =1;
}

message Command {
	optional LTFSDmReqNumber reqnum = 1;
	optional LTFSDmReqNumberResp reqnumresp = 2;
	optional LTFSDmStopRequest stoprequest = 3;
	optional LTFSDmStopResp stopresp = 4;
	optional LTFSDmStatusRequest statusrequest = 5;
	optional LTFSDmStatusResp statusresp = 6;
	optional LTFSDmSendObjects sendobjects = 7;
	optional LTFSDmSendObjectsResp sendobjectsresp = 8;
	optional LTFSDmMigRequest migrequest = 9;
	optional LTFSDmMigRequestResp migrequestresp = 10;
	optional LTFSDmSelRecRequest selrecrequest = 11;
	optional LTFSDmSelRecRequestResp selrecrequestresp = 12;
	optional LTFSDmReqStatusRequest reqstatusrequest = 13;
	optional LTFSDmReqStatusResp reqstatusresp = 14;
	optional LTFSDmAddRequest addrequest = 15;
	optional LTFSDmAddResp addresp = 16;
	optional LTFSDmInfoRequestsRequest inforequestsrequest = 17;
	optional LTFSDmInfoRequestsResp inforequestsresp = 18;
	optional LTFSDmInfoJobsRequest infojobsrequest = 19;
	optional LTFSDmInfoJobsResp infojobsresp = 20;
	optional LTFSDmInfoDrivesRequest infodrivesrequest = 21;
	optional LTFSDmInfoDrivesResp infodrivesresp = 22;
	optional LTFSDmInfoTapesRequest infotapesrequest = 23;
	optional LTFSDmInfoTapesResp infotapesresp = 24;
	optional LTFSDmPoolCreateRequest poolcreaterequest = 25;
	optional LTFSDmPoolDeleteRequest pooldeleterequest = 26;
	optional LTFSDmPoolAddRequest pooladdrequest = 27;
	optional LTFSDmPoolRemoveRequest poolremoverequest = 28;
	optional LTFSDmPoolResp poolresp = 29;
	optional LTFSDmInfoPoolsRequest infopoolsrequest = 30;
	optional LTFSDmInfoPoolsResp infopoolsresp = 31;
	optional LTFSDmRetrieveRequest retrieverequest = 32;
	optional LTFSDmRetrieveResp retrieveresp = 33;
	optional LTFSDmTransRecRequest transrecrequest = 34;
	optional LTFSDmTransRecResp transrecresp = 35;
}
